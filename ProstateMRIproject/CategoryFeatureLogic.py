"""
This will do the one-hot encoding
    for the different types of category values
"""

import DataSetLogic
import numpy as np

def categoryToOneHot_WithStartCatNum(columnVector,numCategories,valueIfBoth,valueIfNeither,
                                     initCategoryNumber):
    outputArray = np.zeros((len(columnVector), numCategories))
    for rowInd in range(len(columnVector)):
        currentCatValue = columnVector[rowInd]
        if (currentCatValue < 0):
            outputArray[rowInd, :] = np.ones((1, numCategories)) * DataSetLogic.MISSING_DATA_FLOAT_VALUE
        elif (valueIfBoth > 0 and currentCatValue == valueIfBoth):
            outputArray[rowInd, :] = np.ones((1, numCategories))
        elif (valueIfNeither > 0 and currentCatValue == valueIfNeither):
            outputArray[rowInd, :] = np.zeros((1, numCategories))
        else:
            outputArray[rowInd, currentCatValue - initCategoryNumber] = 1
    return outputArray

def categoryToOneHotNoBothNeither(columnVector,numCategories):
    return categoryToOneHotFeature(columnVector,numCategories,DataSetLogic.MISSING_DATA_FLOAT_VALUE,DataSetLogic.MISSING_DATA_FLOAT_VALUE)

def categoryToOneHotFeature(columnVector,numCategories,valueIfBoth,valueIfNeither):
    return categoryToOneHot_WithStartCatNum(columnVector,numCategories,
                                            valueIfBoth,valueIfNeither,1)

def categoryToOneHotFeatureZeroStart(columnVector,numCategories,valueIfBoth,valueIfNeither):
    return categoryToOneHot_WithStartCatNum(columnVector,numCategories,
                                            valueIfBoth,valueIfNeither,0)




def autoGeneratedCategoryToOneHot(columnVector,missingDataStrs):
    columnValues =[]
    for val in columnVector:
        if(val):
            try:
                columnValues.append(str(val).lower())
            except:
                columnValues.append('none')
        else:
            columnValues.append('none')
    uniqueValues = DataSetLogic.obtainUniqueEntries(columnValues)
    generatedCategoryDict = {}
    currentIndex=0
    for value in uniqueValues:
        notMissing = True
        for missingStr in missingDataStrs:
            if(value in missingStr):
                notMissing = False
        if(notMissing):
            generatedCategoryDict[value]=currentIndex
            currentIndex = currentIndex+1
    outputColumnNumbers = []
    for entry in columnVector:
        outputColumnNumbers.append(
            DataSetLogic.obtainCategoryFieldValueWithMissingDataIndicators(
                entry,generatedCategoryDict,missingDataStrs))
    outputColVector = np.array(outputColumnNumbers)
    categoryMatrix = categoryToOneHotFeatureZeroStart(
        outputColVector,np.max(outputColVector)+1,
        DataSetLogic.MISSING_DATA_FLOAT_VALUE,DataSetLogic.MISSING_DATA_FLOAT_VALUE)
    return categoryMatrix,outputColVector,generatedCategoryDict
